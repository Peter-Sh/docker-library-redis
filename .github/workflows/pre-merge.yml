
name: Build and Test
on:
  pull_request:
    branches:
      - master
      - release/*
  workflow_call:
    inputs:
      release_tag:
        description: 'Release tag to build'
        required: true
        type: string
    outputs:
      docker_image_urls:
        description: 'Array of Docker image URLs that were published'
        value: ${{ jobs.collect-image-urls.outputs.docker_image_urls }}

jobs:
  build-and-test:
    #runs-on: ${{ contains(matrix.platform, 'arm64') && 'ubuntu24-arm64-2-8' || 'ubuntu-latest' }}
    runs-on: ["${{ contains(matrix.platform, 'arm64') && 'ARM64' || 'X64' }}", "self-hosted"]
    strategy:
      fail-fast: false
      matrix:
        distribution:
          - debian
          # - alpine
        platform:
          - linux/amd64
          # - linux/i386
          # - linux/arm/v5
          # - linux/arm/v6
          # - linux/arm/v7
          # - linux/mips64le
          # - linux/ppc64le
          # - linux/s390x
          - linux/arm64
          # - linux/riscv64
        exclude:
        - distribution: alpine
          platform: linux/mips64le
        - distribution: alpine
          platform: linux/arm/v5
        - distribution: debian
          platform: linux/riscv64
        - distribution: debian
          platform: linux/arm/v6
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Ensure release branch
        if: ${{ inputs.release_tag }}
        uses: redis/redis-oss-release-automation/.github/actions/ensure-release-branch@main
        with:
          release_tag: ${{ inputs.release_tag }}
          gh_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: ./.github/actions/build-and-tag-locally
        with:
          distribution: ${{ matrix.distribution }}
          platform: ${{ matrix.platform }}
          registry_username: ${{ vars.REGISTRY_REPOSITORY == 'ghcr.io' && github.actor || vars.REGISTRY_USERNAME }}
          registry_password: ${{ vars.REGISTRY_REPOSITORY == 'ghcr.io' && secrets.GITHUB_TOKEN || secrets.REGISTRY_PASSWORD }}
          publish_image: ${{ vars.PUBLISH_IMAGE }}
          registry_repository: ${{ vars.REGISTRY_REPOSITORY == 'ghcr.io' && format('ghcr.io/{0}', github.repository) || vars.REGISTRY_REPOSITORY }}
          release_tag: ${{ inputs.release_tag }}

  collect-image-urls:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ inputs.release_tag }}
    outputs:
      docker_image_urls: ${{ steps.collect-urls.outputs.urls }}
    steps:
      - name: Download all image URL artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: image-url-*
          path: ./image-urls
          merge-multiple: true

      - name: Collect image URLs from artifacts
        id: collect-urls
        run: |
          if [ -d "./image-urls" ] && [ "$(ls -A ./image-urls 2>/dev/null)" ]; then
            echo "Found image URL files:"
            urls=$(find ./image-urls -name "*.txt" -exec cat {} \; | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "Collected image URLs: $urls"
          else
            echo "No image URL artifacts found"
            urls="[]"
          fi

          echo "urls=$urls" >> "$GITHUB_OUTPUT"

  notify-slack:
    runs-on: ubuntu-latest
    needs: collect-image-urls
    if: ${{ inputs.release_tag && needs.collect-image-urls.outputs.docker_image_urls != '[]' }}
    steps:
      - name: Send Slack notification
        run: |
          # Parse the image URLs from JSON array
          image_urls='${{ needs.collect-image-urls.outputs.docker_image_urls }}'

          # Create formatted list of image URLs
          formatted_urls=$(echo "$image_urls" | jq -r '.[] | "• `" + . + "`"' | tr '\n' '\n')

          # Create Slack message payload
          cat > slack_payload.json << EOF
          {
            "text": "🐳 Docker Images Published for Release ${{ inputs.release_tag }}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "🐳 Docker Images Published for Release ${{ inputs.release_tag }}"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "The following Docker images have been successfully published:\n\n$formatted_urls"
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "Repository: ${{ github.repository }} | Commit: \`${{ github.sha }}\`"
                  }
                ]
              }
            ]
          }
          EOF

          # Send to Slack
          curl -X POST -H 'Content-type: application/json' \
            --data @slack_payload.json \
            "${{ secrets.SLACK_WEB_HOOK_URL }}"

          echo "Slack notification sent for release ${{ inputs.release_tag }}"
